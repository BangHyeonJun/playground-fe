name: "[CD] 프로젝트 배포" # Workflow 이름

on:
  push:
    branches: ["main"] # main 브랜치에 push가 일어날 때만 workflow가 실행됨

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_DOCS_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_DOCS_PROJECT_ID }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20]
        pnpm-version: [8]

    steps:
      - name: 소스코드 체크아웃 # Repo checkout
        uses: actions/checkout@v4

      - uses: pnpm/action-setup@v2
        name: pnpm ${{ matrix.pnpm-version }} 설치
        with:
          version: ${{ matrix.pnpm-version }}
          run_install: false

      - name: Node.js ${{ matrix.node-version }} 설치
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "pnpm"

      - name: pnpm 저장 디렉토리 가져오기
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - uses: actions/cache@v3
        name: pnpm 캐시 설정
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Vercel CLI 설치
        run: pnpm add -g -w vercel@latest

      - name: Vercel 원격 환경에서 환경 변수 및 프로젝트 설정을 가져오기
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

      - name: 프로젝트 빌드
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}

      - name: 프로젝트 배포
        run: vercel deploy --prebuilt --prod  --token=${{ secrets.VERCEL_TOKEN }}
